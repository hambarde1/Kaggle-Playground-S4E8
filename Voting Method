{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":76727,"databundleVersionId":9045607,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-31T18:13:40.522033Z","iopub.execute_input":"2024-08-31T18:13:40.522696Z","iopub.status.idle":"2024-08-31T18:13:40.531466Z","shell.execute_reply.started":"2024-08-31T18:13:40.522666Z","shell.execute_reply":"2024-08-31T18:13:40.530617Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Importing Libraries","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import matthews_corrcoef\nfrom sklearn.ensemble import BaggingClassifier\nimport xgboost as xgb","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:13:41.220093Z","iopub.execute_input":"2024-08-31T18:13:41.220421Z","iopub.status.idle":"2024-08-31T18:13:41.552668Z","shell.execute_reply.started":"2024-08-31T18:13:41.220395Z","shell.execute_reply":"2024-08-31T18:13:41.551888Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Loading Dataset\n","metadata":{}},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/playground-series-s4e8/train.csv',index_col ='id')\ntest = pd.read_csv('/kaggle/input/playground-series-s4e8/test.csv',index_col='id')","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:13:41.983353Z","iopub.execute_input":"2024-08-31T18:13:41.983731Z","iopub.status.idle":"2024-08-31T18:13:56.771299Z","shell.execute_reply.started":"2024-08-31T18:13:41.983701Z","shell.execute_reply":"2024-08-31T18:13:56.770306Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:13:56.773410Z","iopub.execute_input":"2024-08-31T18:13:56.774080Z","iopub.status.idle":"2024-08-31T18:13:56.803880Z","shell.execute_reply.started":"2024-08-31T18:13:56.774045Z","shell.execute_reply":"2024-08-31T18:13:56.803040Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:13:56.804973Z","iopub.execute_input":"2024-08-31T18:13:56.805314Z","iopub.status.idle":"2024-08-31T18:13:56.827746Z","shell.execute_reply.started":"2024-08-31T18:13:56.805281Z","shell.execute_reply":"2024-08-31T18:13:56.826796Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(train.shape)\nprint(test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:13:56.830633Z","iopub.execute_input":"2024-08-31T18:13:56.831212Z","iopub.status.idle":"2024-08-31T18:13:56.835773Z","shell.execute_reply.started":"2024-08-31T18:13:56.831175Z","shell.execute_reply":"2024-08-31T18:13:56.834802Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Pre-Processing\n","metadata":{}},{"cell_type":"code","source":"train.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:13:56.837056Z","iopub.execute_input":"2024-08-31T18:13:56.837328Z","iopub.status.idle":"2024-08-31T18:14:04.287902Z","shell.execute_reply.started":"2024-08-31T18:13:56.837303Z","shell.execute_reply":"2024-08-31T18:14:04.286964Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:14:04.289010Z","iopub.execute_input":"2024-08-31T18:14:04.289298Z","iopub.status.idle":"2024-08-31T18:14:09.262530Z","shell.execute_reply.started":"2024-08-31T18:14:04.289274Z","shell.execute_reply":"2024-08-31T18:14:09.261614Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Insights:**\n>  There are no duplicate entires therefore we can began with concatentation of the train and test data frames.","metadata":{}},{"cell_type":"code","source":"df = pd.concat([train,test]) ","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:14:09.263654Z","iopub.execute_input":"2024-08-31T18:14:09.263952Z","iopub.status.idle":"2024-08-31T18:14:10.445258Z","shell.execute_reply.started":"2024-08-31T18:14:09.263920Z","shell.execute_reply":"2024-08-31T18:14:10.444501Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:14:10.446231Z","iopub.execute_input":"2024-08-31T18:14:10.446492Z","iopub.status.idle":"2024-08-31T18:14:10.452059Z","shell.execute_reply.started":"2024-08-31T18:14:10.446470Z","shell.execute_reply":"2024-08-31T18:14:10.451223Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## EDA \n","metadata":{}},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:14:10.453072Z","iopub.execute_input":"2024-08-31T18:14:10.453353Z","iopub.status.idle":"2024-08-31T18:14:10.470901Z","shell.execute_reply.started":"2024-08-31T18:14:10.453330Z","shell.execute_reply":"2024-08-31T18:14:10.469931Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Insights:**\n> * id,cap-diameter,stem-height and stem-width are numerical features \n> * while the rest features are categorical features.","metadata":{}},{"cell_type":"markdown","source":"## Handling the missing values","metadata":{}},{"cell_type":"code","source":"#Finding percentage of missing values\ndf.isna().mean()*100","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:14:10.475793Z","iopub.execute_input":"2024-08-31T18:14:10.476141Z","iopub.status.idle":"2024-08-31T18:14:17.545672Z","shell.execute_reply.started":"2024-08-31T18:14:10.476114Z","shell.execute_reply":"2024-08-31T18:14:17.544732Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Insights:**\n1. Features like stem-root,veil-type,spore-print-color and veil-color contain very high % of NaN values( more than 85%).\n2. So, I decided to drop those columns to proceed further.","metadata":{}},{"cell_type":"code","source":"df = df.drop(['veil-type','spore-print-color','stem-root','veil-color' ],axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:14:17.547248Z","iopub.execute_input":"2024-08-31T18:14:17.547607Z","iopub.status.idle":"2024-08-31T18:14:18.634548Z","shell.execute_reply.started":"2024-08-31T18:14:17.547562Z","shell.execute_reply":"2024-08-31T18:14:18.633238Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Separating out Numerical and Categorical features \nnumeric_feature = [feature for feature in df.columns if df[feature].dtype != 'O']\ncategorical_feature = [feature for feature in df.columns if df[feature].dtype == 'O']","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:14:18.635691Z","iopub.execute_input":"2024-08-31T18:14:18.635961Z","iopub.status.idle":"2024-08-31T18:14:18.641759Z","shell.execute_reply.started":"2024-08-31T18:14:18.635939Z","shell.execute_reply":"2024-08-31T18:14:18.640863Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"categorical_feature.remove('class') # Removing the target feature: class","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:14:18.643034Z","iopub.execute_input":"2024-08-31T18:14:18.643365Z","iopub.status.idle":"2024-08-31T18:14:18.650284Z","shell.execute_reply.started":"2024-08-31T18:14:18.643340Z","shell.execute_reply":"2024-08-31T18:14:18.649380Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"categorical_feature","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:14:18.651487Z","iopub.execute_input":"2024-08-31T18:14:18.651838Z","iopub.status.idle":"2024-08-31T18:14:18.659892Z","shell.execute_reply.started":"2024-08-31T18:14:18.651806Z","shell.execute_reply":"2024-08-31T18:14:18.659061Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Creating a function to impute mode for the categorical features instead of Null values\ndef cat_imputer(lists):\n    for i in lists:\n        mode = df[i].mode()[0]  # Get the first value of the mode\n        df[i] = df[i].fillna(mode)  # Fill NaN with the mode\n    return df  # Return X after all columns are processed\n","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:14:18.660959Z","iopub.execute_input":"2024-08-31T18:14:18.661256Z","iopub.status.idle":"2024-08-31T18:14:18.667539Z","shell.execute_reply.started":"2024-08-31T18:14:18.661233Z","shell.execute_reply":"2024-08-31T18:14:18.666776Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cat_imputer(categorical_feature)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:14:18.668818Z","iopub.execute_input":"2024-08-31T18:14:18.669100Z","iopub.status.idle":"2024-08-31T18:14:34.532067Z","shell.execute_reply.started":"2024-08-31T18:14:18.669076Z","shell.execute_reply":"2024-08-31T18:14:34.531029Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for col in numeric_feature:\n    median = df[col].median()\n    df[col].fillna(median, inplace=True)\n    ","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:14:34.533278Z","iopub.execute_input":"2024-08-31T18:14:34.533581Z","iopub.status.idle":"2024-08-31T18:14:34.915057Z","shell.execute_reply.started":"2024-08-31T18:14:34.533544Z","shell.execute_reply":"2024-08-31T18:14:34.914152Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:14:34.916264Z","iopub.execute_input":"2024-08-31T18:14:34.916604Z","iopub.status.idle":"2024-08-31T18:14:41.419368Z","shell.execute_reply.started":"2024-08-31T18:14:34.916558Z","shell.execute_reply":"2024-08-31T18:14:41.418356Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Handling the Categorical features","metadata":{}},{"cell_type":"code","source":"#Finding No. of unique categories in every categorical feature \n\ndef uni_cat(lists):\n    d = {}\n    for i in lists:\n        d[i] = df[i].nunique()\n    return d","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:14:41.420472Z","iopub.execute_input":"2024-08-31T18:14:41.420823Z","iopub.status.idle":"2024-08-31T18:14:41.426036Z","shell.execute_reply.started":"2024-08-31T18:14:41.420796Z","shell.execute_reply":"2024-08-31T18:14:41.424875Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"uni_cat(categorical_feature)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:14:41.427389Z","iopub.execute_input":"2024-08-31T18:14:41.427853Z","iopub.status.idle":"2024-08-31T18:14:46.036933Z","shell.execute_reply.started":"2024-08-31T18:14:41.427824Z","shell.execute_reply":"2024-08-31T18:14:46.035913Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Insights:**\nAs every categorical feature here was more than 10 categories using Label encoding is a good way to ensure proper encoding","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\n\ndef encoding_cat(df, columns):\n    encoder = LabelEncoder()\n    for col in columns:\n        if col in df.columns:\n            df[col] = encoder.fit_transform(df[col])\n        else:\n            print(f\"Warning: Column {col} not found in DataFrame.\")\n    \n    return df\n","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:14:46.038166Z","iopub.execute_input":"2024-08-31T18:14:46.038510Z","iopub.status.idle":"2024-08-31T18:14:46.044290Z","shell.execute_reply.started":"2024-08-31T18:14:46.038476Z","shell.execute_reply":"2024-08-31T18:14:46.043389Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"encoding_cat(df,categorical_feature)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:14:46.045831Z","iopub.execute_input":"2024-08-31T18:14:46.046219Z","iopub.status.idle":"2024-08-31T18:15:01.819160Z","shell.execute_reply.started":"2024-08-31T18:14:46.046186Z","shell.execute_reply":"2024-08-31T18:15:01.818136Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Handling the Numerical Features","metadata":{}},{"cell_type":"code","source":"X = df.drop(['class'],axis=1) #Numerical data","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:15:01.820399Z","iopub.execute_input":"2024-08-31T18:15:01.820737Z","iopub.status.idle":"2024-08-31T18:15:02.128361Z","shell.execute_reply.started":"2024-08-31T18:15:01.820709Z","shell.execute_reply":"2024-08-31T18:15:02.127534Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X.describe() # Stats for the numerical features\n","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:15:02.129545Z","iopub.execute_input":"2024-08-31T18:15:02.129927Z","iopub.status.idle":"2024-08-31T18:15:05.174826Z","shell.execute_reply.started":"2024-08-31T18:15:02.129894Z","shell.execute_reply":"2024-08-31T18:15:05.173777Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nscaling = StandardScaler()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:15:05.176307Z","iopub.execute_input":"2024-08-31T18:15:05.177210Z","iopub.status.idle":"2024-08-31T18:15:05.181885Z","shell.execute_reply.started":"2024-08-31T18:15:05.177169Z","shell.execute_reply":"2024-08-31T18:15:05.180602Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_scaled = scaling.fit_transform(X)\nx = pd.DataFrame(X_scaled,columns = X.columns)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:15:05.183003Z","iopub.execute_input":"2024-08-31T18:15:05.183268Z","iopub.status.idle":"2024-08-31T18:15:06.608997Z","shell.execute_reply.started":"2024-08-31T18:15:05.183245Z","shell.execute_reply":"2024-08-31T18:15:06.607985Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:15:06.609986Z","iopub.execute_input":"2024-08-31T18:15:06.610979Z","iopub.status.idle":"2024-08-31T18:15:06.640382Z","shell.execute_reply.started":"2024-08-31T18:15:06.610952Z","shell.execute_reply":"2024-08-31T18:15:06.639275Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import seaborn as sns \nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10, 8))\nsns.heatmap(x.corr(), annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)\nplt.title('Correlation Heatmap')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:15:06.646993Z","iopub.execute_input":"2024-08-31T18:15:06.647354Z","iopub.status.idle":"2024-08-31T18:15:11.043028Z","shell.execute_reply.started":"2024-08-31T18:15:06.647327Z","shell.execute_reply":"2024-08-31T18:15:11.042104Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Insights:**\n","metadata":{}},{"cell_type":"markdown","source":"## Splitting the data into train and test ","metadata":{}},{"cell_type":"code","source":"Y= df['class'] ","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:15:11.044340Z","iopub.execute_input":"2024-08-31T18:15:11.044825Z","iopub.status.idle":"2024-08-31T18:15:11.049910Z","shell.execute_reply.started":"2024-08-31T18:15:11.044788Z","shell.execute_reply":"2024-08-31T18:15:11.048846Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y = Y.dropna()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:15:11.051350Z","iopub.execute_input":"2024-08-31T18:15:11.051756Z","iopub.status.idle":"2024-08-31T18:15:11.467757Z","shell.execute_reply.started":"2024-08-31T18:15:11.051722Z","shell.execute_reply":"2024-08-31T18:15:11.466760Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:15:11.468957Z","iopub.execute_input":"2024-08-31T18:15:11.469262Z","iopub.status.idle":"2024-08-31T18:15:11.476491Z","shell.execute_reply.started":"2024-08-31T18:15:11.469229Z","shell.execute_reply":"2024-08-31T18:15:11.475496Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:15:11.477724Z","iopub.execute_input":"2024-08-31T18:15:11.478027Z","iopub.status.idle":"2024-08-31T18:15:11.485343Z","shell.execute_reply.started":"2024-08-31T18:15:11.478005Z","shell.execute_reply":"2024-08-31T18:15:11.484447Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_train = x.iloc[:3116945]","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:15:11.486492Z","iopub.execute_input":"2024-08-31T18:15:11.486803Z","iopub.status.idle":"2024-08-31T18:15:11.492323Z","shell.execute_reply.started":"2024-08-31T18:15:11.486781Z","shell.execute_reply":"2024-08-31T18:15:11.491454Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_test = x.iloc[3116945:]","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:15:11.493507Z","iopub.execute_input":"2024-08-31T18:15:11.493986Z","iopub.status.idle":"2024-08-31T18:15:11.500137Z","shell.execute_reply.started":"2024-08-31T18:15:11.493962Z","shell.execute_reply":"2024-08-31T18:15:11.499213Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Encoding e as 0 and p as 1 \nfrom sklearn.preprocessing import OrdinalEncoder\no_encoder = OrdinalEncoder(categories=[['e','p']]) \ny = o_encoder.fit_transform(y.values.reshape(-1,1))\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:15:11.501302Z","iopub.execute_input":"2024-08-31T18:15:11.501613Z","iopub.status.idle":"2024-08-31T18:15:12.331204Z","shell.execute_reply.started":"2024-08-31T18:15:11.501566Z","shell.execute_reply":"2024-08-31T18:15:12.330406Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y = pd.DataFrame(y)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:15:12.332234Z","iopub.execute_input":"2024-08-31T18:15:12.332503Z","iopub.status.idle":"2024-08-31T18:15:12.336898Z","shell.execute_reply.started":"2024-08-31T18:15:12.332481Z","shell.execute_reply":"2024-08-31T18:15:12.335904Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y","metadata":{"execution":{"iopub.status.busy":"2024-08-31T18:15:12.337968Z","iopub.execute_input":"2024-08-31T18:15:12.338214Z","iopub.status.idle":"2024-08-31T18:15:12.350576Z","shell.execute_reply.started":"2024-08-31T18:15:12.338192Z","shell.execute_reply":"2024-08-31T18:15:12.349621Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_train = y.squeeze()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T20:54:22.024375Z","iopub.execute_input":"2024-08-31T20:54:22.025169Z","iopub.status.idle":"2024-08-31T20:54:22.029308Z","shell.execute_reply.started":"2024-08-31T20:54:22.025139Z","shell.execute_reply":"2024-08-31T20:54:22.028411Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Voting\n","metadata":{}},{"cell_type":"code","source":"import xgboost as xgb\nimport lightgbm as lgb\nfrom sklearn.ensemble import VotingClassifier","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:04:18.598771Z","iopub.execute_input":"2024-08-31T21:04:18.599403Z","iopub.status.idle":"2024-08-31T21:04:18.603936Z","shell.execute_reply.started":"2024-08-31T21:04:18.599371Z","shell.execute_reply":"2024-08-31T21:04:18.602913Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Initialize XGBoost model\nxgb_model = xgb.XGBClassifier(\n    n_estimators=1000,  # Number of boosting rounds\n    learning_rate=0.1,  # Learning rate\n    max_depth=3,  # Maximum depth of a tree\n    use_label_encoder=False,\n    eval_metric='logloss'  # Evaluation metric\n)\n\n# Initialize LightGBM model\nlgb_model = lgb.LGBMClassifier(\n    n_estimators=1000,  # Number of boosting rounds\n    learning_rate=0.1,  # Learning rate\n    num_leaves=31,  # Number of leaves in one tree\n    boosting_type='gbdt'  # Gradient boosting decision tree\n)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:14:42.035688Z","iopub.execute_input":"2024-08-31T21:14:42.036036Z","iopub.status.idle":"2024-08-31T21:14:42.041549Z","shell.execute_reply.started":"2024-08-31T21:14:42.036011Z","shell.execute_reply":"2024-08-31T21:14:42.040635Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"voting_clf = VotingClassifier(\n    estimators=[\n        ('xgb', xgb_model),\n        ('lgb', lgb_model)\n    ],\n    voting='soft'  # Use 'soft' for averaging predicted probabilities, 'hard' for majority voting\n)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:14:42.497430Z","iopub.execute_input":"2024-08-31T21:14:42.497792Z","iopub.status.idle":"2024-08-31T21:14:42.502466Z","shell.execute_reply.started":"2024-08-31T21:14:42.497765Z","shell.execute_reply":"2024-08-31T21:14:42.501439Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"voting_clf.fit(x_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:14:43.118700Z","iopub.execute_input":"2024-08-31T21:14:43.119244Z","iopub.status.idle":"2024-08-31T21:20:27.186661Z","shell.execute_reply.started":"2024-08-31T21:14:43.119215Z","shell.execute_reply":"2024-08-31T21:20:27.185639Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_predv = voting_clf.predict(x_train)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:20:27.188903Z","iopub.execute_input":"2024-08-31T21:20:27.189710Z","iopub.status.idle":"2024-08-31T21:22:28.125804Z","shell.execute_reply.started":"2024-08-31T21:20:27.189673Z","shell.execute_reply":"2024-08-31T21:22:28.124791Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_mcc = matthews_corrcoef(y, y_predv)\nprint(f'Training MCC: {train_mcc:.4f}')","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:22:28.127091Z","iopub.execute_input":"2024-08-31T21:22:28.127396Z","iopub.status.idle":"2024-08-31T21:22:28.492205Z","shell.execute_reply.started":"2024-08-31T21:22:28.127371Z","shell.execute_reply":"2024-08-31T21:22:28.491278Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_vote = voting_clf.predict(x_test)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:23:00.629478Z","iopub.execute_input":"2024-08-31T21:23:00.630339Z","iopub.status.idle":"2024-08-31T21:24:21.796782Z","shell.execute_reply.started":"2024-08-31T21:23:00.630305Z","shell.execute_reply":"2024-08-31T21:24:21.795753Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final_vote = o_encoder.inverse_transform(y_vote.reshape(-1,1))","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:24:21.798716Z","iopub.execute_input":"2024-08-31T21:24:21.799184Z","iopub.status.idle":"2024-08-31T21:24:21.846322Z","shell.execute_reply.started":"2024-08-31T21:24:21.799148Z","shell.execute_reply":"2024-08-31T21:24:21.845518Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final_vote = final_vote.squeeze()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:24:21.847650Z","iopub.execute_input":"2024-08-31T21:24:21.847955Z","iopub.status.idle":"2024-08-31T21:24:21.852131Z","shell.execute_reply.started":"2024-08-31T21:24:21.847931Z","shell.execute_reply":"2024-08-31T21:24:21.851126Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission = pd.DataFrame({'id': test.index, 'class': final_vote})\nsubmission.to_csv('submission.csv', index=False)\nprint(\"Final submission file created successfully!\")","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:24:21.854381Z","iopub.execute_input":"2024-08-31T21:24:21.854825Z","iopub.status.idle":"2024-08-31T21:24:24.287386Z","shell.execute_reply.started":"2024-08-31T21:24:21.854792Z","shell.execute_reply":"2024-08-31T21:24:24.286452Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}